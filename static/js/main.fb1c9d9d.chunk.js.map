{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","length","filteredRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"iLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCSCQ,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAEC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,EAA1B,cACzB,gCACC,6BAAKF,IACL,4BAAIC,WCSOK,EAfE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACnB,OACE,8BAEAA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAO,cAAC,EAAD,CAAcR,GAAIO,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,OAA7CS,SCEPC,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,qBAAKT,UAAU,MAAf,SACC,uBAAOA,UAAU,mCAAmCU,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCS5FI,EAZA,SAACC,GAEf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,YCuBKC,E,kDAxBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,qDAQnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAGG,KAAKJ,MAAMC,SACN,6DAGDG,KAAKX,MAAMK,a,GAnBOQ,aC6DZC,G,wDApDd,aAAe,IAAD,8BACb,gBAiBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAlB1C,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAa,IAJD,E,qDASd,WAAqB,IAAD,OACnBG,MAAM,8CAA8C5C,MAAK,SAAA6C,GACxD,OAAOA,EAASC,UACd9C,MAAK,SAAA+C,GACP,EAAKX,SAAS,CAAEtB,OAAQiC,S,oBAY1B,WAAU,IAAD,OAER,GAAIZ,KAAKJ,MAAMjB,OAAOkC,OAEf,CAEP,IAAMC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAC,GAE/C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAGjE,OACA,sBAAK1C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACA,cAAC,EAAD,CAAUzB,OAAQmC,WAdnB,OAAO,gD,GA7BQZ,cCHlBiB,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAM1B5D,M","file":"static/js/main.fb1c9d9d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n// mozna destrukturyzowac parametry przekazane jako props juz w argumentach funkcji\r\nconst Card = ({name, email, id}) => {\r\n\r\n\treturn(\r\n\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robo_photo' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots })=> {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\t\treturn <Card key={i} id={user.id} name={user.name} email={user.email}/>\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search robots' onChange={searchChange}/> \r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n\r\n\r\n\r\n};\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { \r\n\t\t\thasError: false\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Ups. Cos poszlo nie tak...</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css';\r\n\r\n\r\n // zeby uzywac stanu musze zmienic App z funkcji na obiekt...\r\n\r\n\r\nclass App extends Component  {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\r\n\t}\r\n// takie rzeczy nalezy pisac w celu zaladowania jsona i zupdatowaniu state\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n\t\t\treturn response.json();\r\n\t\t}).then(users => {\r\n\t\t\tthis.setState({ robots: users });\r\n\t\t})\r\n\t}\r\n\r\n// zeby this odnosilo sie do App a nie do komponentu na ktorym wystapil event (czyli SearchBox) trzeba uzywac syntaxu = () = > najlepiej uzywac tego do wszystkich swoich funkcji, a te z reacta nie wymagaja strzalkowania\r\n\tonSearchChange = (event) => {\r\n\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tif(!this.state.robots.length) {\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t} else {\r\n\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t} )\r\n\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'> RoboFriend </h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { robots } from './robots';\r\n\r\nReactDOM.render(\r\n  <App  />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}